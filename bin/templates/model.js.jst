import { BaseModel } from 'supersonic'
import * as g from 'graphql'
import * as r from 'graphql-relay'

import { nodeInterface } from '~/app/schema/node_type'

export default class {{= data.modelName.classify() }} extends BaseModel {
  static get schema() {
    if (this._schema) return this._schema
    this.generateSchema()
    return this._schema
  }

  static generateSchema() {
    this._schema = new g.GraphQLObjectType({
      name: '{{= data.graphQLType.name }}',
      fields: { {{ for (key in data.graphQLType.fields) { }}
        {{= '' + key.toString() + ": { type: " + data.graphQLType.fields[key]['type'] + " }," }} {{ } }}
      },
      interfaces: [nodeInterface]
    })
  }

  static createMutation() {
    return r.mutationWithClientMutationId({
      name: 'create{{= data.graphQLType.name }}',
      inputFields: { {{ for (key in data.graphQLType.fields) { }}
        {{= '' + key.toString() + ": { type: new g.GraphQLNonNull(" + data.graphQLType.fields[key]['type'] + ") }," }} {{ } }}
      },
      outputFields: {
        {{= data.modelName.singularize().underscore() }}: {
          type: {{= data.modelName.classify() }}.schema,
          resolve: (payload) => {{= data.modelName.classify() }}.find(payload.{{= data.modelName.singularize().underscore() }}_id)
        }
      },
      mutateAndGetPayload: (inputs) => {
        let {{= data.modelName.singularize().underscore() }} = {{= data.modelName.classify() }}.create(inputs)
        return { {{= data.modelName.singularize().underscore() }}_id: {{= data.modelName.singularize().underscore() }}.id }
      }
    })
  }

  static updateMutation() {
    return r.mutationWithClientMutationId({
      name: 'update{{= data.graphQLType.name }}',
      inputFields: { {{ for (key in data.graphQLType.fields) { }}
        {{= '' + key.toString() + ": { type: new g.GraphQLNonNull(" + data.graphQLType.fields[key]['type'] + ") }," }} {{ } }}
      },
      outputFields: {
        {{= data.modelName.singularize().underscore() }}: {
          type: {{= data.modelName.classify() }}.schema,
          resolve: (payload) => {{= data.modelName.classify() }}.find(payload.{{= data.modelName.singularize().underscore() }}_id)
        }
      },
      mutateAndGetPayload: (inputs) => {
        let { id, ...params } = inputs
        let {{= data.modelName.singularize().underscore() }} = {{= data.modelName.classify() }}.find(id)
        {{= data.modelName.singularize().underscore() }}.update(params)
        return { {{= data.modelName.singularize().underscore() }}_id: {{= data.modelName.singularize().underscore() }}.id }
      }
    })
  }

  static destroyMutation() {
    return r.mutationWithClientMutationId({
      name: 'destroy{{= data.graphQLType.name }}',
      inputFields: {
        id: { type: new g.GraphQLNonNull(g.GraphQLID) }
      },
      outputFields: {
        {{= data.modelName.singularize().underscore() }}: {
          type: {{= data.modelName.classify() }}.schema,
          resolve: (payload) => {{= data.modelName.classify() }}.find(payload.{{= data.modelName.singularize().underscore() }}_id)
        }
      },
      mutateAndGetPayload: (inputs) => {
        let {{= data.modelName.singularize().underscore() }} = {{= data.modelName.classify() }}.find(inputs.id)
        {{= data.modelName.singularize().underscore() }}.destroy()
        return { {{= data.modelName.singularize().underscore() }}_id: {{= data.modelName.singularize().underscore() }}.id }
      }
    })
  }
}
